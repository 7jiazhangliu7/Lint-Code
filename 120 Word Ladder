public class Solution {
    /**
      * @param start, a string
      * @param end, a string
      * @param dict, a set of string
      * @return an integer
      */
    public int ladderLength(String start, String end, Set<String> dict) {
        // write your code here
        if (dict.size() == 0)  
            return 0; 
 
        LinkedList<String> wordQueue = new LinkedList<String>();
        LinkedList<Integer> distanceQueue = new LinkedList<Integer>();
 
        wordQueue.add(start);
        distanceQueue.add(1);
        
        while(!wordQueue.isEmpty()) {
            String word = wordQueue.pop();
            Integer currDistance = distanceQueue.pop();
            
            if(word.equals(end)) return currDistance;
            
            for(int i = 0; i < word.length(); i++) {
                char[] ary = word.toCharArray();
                for(char c = 'a'; c <= 'z'; c++) {
                    ary[i] = c;
                    String newWord = new String(ary);
                    if(dict.contains(newWord)){
                        wordQueue.add(newWord);
                        distanceQueue.add(currDistance+1);
                        dict.remove(newWord);
                    }
                }
                
                
            }
        }
        
        return 0;
    }
}
