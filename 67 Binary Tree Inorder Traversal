http://www.lintcode.com/en/problem/binary-tree-inorder-traversal/

/**
 * Definition of TreeNode:
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left, right;
 *     public TreeNode(int val) {
 *         this.val = val;
 *         this.left = this.right = null;
 *     }
 * }
 */
public class Solution {
    /**
     * @param root: The root of binary tree.
     * @return: Inorder in ArrayList which contains node values.
     */
    public ArrayList<Integer> inorderTraversal(TreeNode root) {
        // write your code here
        ArrayList<Integer> result = new ArrayList<Integer>();
        if(root == null) return result;
        
        Stack<TreeNode> s = new Stack<TreeNode>();
        
        TreeNode n = root;
        while(n != null) {
            s.push(n);
            n = n.left;
        }
        
        while(!s.isEmpty()) {
            TreeNode node = s.pop();
            
            result.add(node.val);
            
            if(node.right != null) {
                node = node.right;
                while(node != null) {
                    s.push(node);
                    node = node.left;
                }
            }
        }
        
        return result;
    }
}
