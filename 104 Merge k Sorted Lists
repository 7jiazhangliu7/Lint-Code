/**
 * Definition for ListNode.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int val) {
 *         this.val = val;
 *         this.next = null;
 *     }
 * }
 */ 
public class Solution {
    /**
     * @param lists: a list of ListNode
     * @return: The head of one sorted list.
     */
    public ListNode mergeKLists(List<ListNode> lists) {  
        if(lists == null || lists.size() == 0) {
            return null;
        }
        // write your code here
        while(lists.size() > 1) {
            lists.add(mergeTwoLists(lists.get(0), lists.get(1)));
            lists.remove(0);
            lists.remove(0);
        }
        
        return lists.get(0);
    }
    
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        // write your code here
        if (l1 == null) return l2;
        if (l2 == null) return l1;
        
        ListNode dummy = new ListNode(Integer.MIN_VALUE);
        ListNode result = dummy;
        while(l1 != null && l2 != null) {
            if(l1.val < l2.val) {
                dummy.next = l1;
                l1 = l1.next;
            } else {
                dummy.next = l2;
                l2 = l2.next;
            }
            dummy = dummy.next;
        }
        
        if(l1 == null) {
            dummy.next = l2;
        } else {
            dummy.next = l1;
        }
        
        
        return result.next;
    }
}

