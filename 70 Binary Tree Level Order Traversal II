http://www.lintcode.com/en/problem/binary-tree-level-order-traversal-ii/

/**
 * Definition of TreeNode:
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left, right;
 *     public TreeNode(int val) {
 *         this.val = val;
 *         this.left = this.right = null;
 *     }
 * }
 */
 
 
public class Solution {
    /**
     * @param root: The root of binary tree.
     * @return: buttom-up level order a list of lists of integer
     */
    public ArrayList<ArrayList<Integer>> levelOrderBottom(TreeNode root) {
        // write your code here
        ArrayList<ArrayList<Integer>> result = new ArrayList<ArrayList<Integer>>();
        if(root == null) return result;
        ArrayList<Integer> temp = new ArrayList<Integer>();
        LinkedList<TreeNode> curr = new LinkedList<TreeNode>();
        LinkedList<TreeNode> next = new LinkedList<TreeNode>();
        
        curr.add(root);
        
        while(curr.size() != 0) {
            TreeNode node = curr.removeFirst();
            temp.add(node.val);
            
            
            if(node.left != null) {
                next.add(node.left);
            }
            
            if(node.right != null) {
                next.add(node.right);
            }
            
            if(curr.size() == 0) {
                curr = next;
                next = new LinkedList<TreeNode>();
                result.add(temp);
                temp = new ArrayList<Integer>();
            }
        }
        
        Collections.reverse(result);
        
        return result;
    }
}
