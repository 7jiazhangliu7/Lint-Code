public class Solution {
    /**
     * @param candidates: A list of integers
     * @param target:An integer
     * @return: A list of lists of integers
     */
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        // write your code here
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        
        if(candidates == null || candidates.length == 0) {
            return result;
        }
        Arrays.sort(candidates);
        helper(result, new ArrayList<Integer>(), 0, candidates, target);
        
        return result;
    }
    
    public void helper(List<List<Integer>> result, List<Integer> temp, int index, int[] candidates, int target) {
        if(target == 0) {
            result.add(new ArrayList<Integer>(temp));
            return;
        }
        
        if(target < 0) {
            return;
        }
        
        for(int i = index; i < candidates.length; i++) {
            temp.add(candidates[i]);
            helper(result, temp, i, candidates, target-candidates[i]);
            temp.remove(temp.size()-1);
        }
    }
}
