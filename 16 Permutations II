class Solution {
    /**
     * @param nums: A list of integers.
     * @return: A list of unique permutations.
     */
    public ArrayList<ArrayList<Integer>> permuteUnique(ArrayList<Integer> nums) {
        // write your code here
        ArrayList<ArrayList<Integer>> result = new ArrayList<ArrayList<Integer>>();
        if(nums == null || nums.size() == 0) return result;
        
        Collections.sort(nums);
        
        helper(result, new ArrayList<Integer>(), new boolean[nums.size()], nums);
        
        return result;
    }
    
     public void helper(ArrayList<ArrayList<Integer>> result, ArrayList<Integer> temp, boolean[] visited, ArrayList<Integer> nums) {
        if(temp.size() == nums.size()) {
            result.add(new ArrayList<Integer>(temp));
            return;
        }
        
        for(int i = 0; i < nums.size(); i++) {
            if(i > 0 && nums.get(i) == nums.get(i-1) && visited[i-1]) continue;
            
            if(!visited[i]) {
                temp.add(nums.get(i));
                visited[i] = true;
                helper(result,temp,visited,nums);
                visited[i] = false;
                temp.remove(temp.size()-1);
            }
        }
    }
}

