public class Solution {
    /**
     * @param nums: A list of integers.
     * @return: the median of numbers
     */
    public int[] medianII(int[] nums) {
        // write your code here
        if(nums == null || nums.length == 0) {
            return nums;
        }
        
        int[] result = new int[nums.length];
        
        List<Integer> list = new LinkedList<Integer>();
        list.add(nums[0]);
        result[0] = nums[0];
        for(int i = 1; i < nums.length; i++) {
            int pos = searchInsert(list, nums[i]);
            list.add(pos, nums[i]);
            result[i] = list.get((list.size()-1)/2);
        }
        
        return result;
    }
    
    public int searchInsert(List<Integer> A, int target) {
        // write your code here
        if(A == null || A.size() == 0) {
            return 0;
        }
        
        if(A.get(0) >= target) return 0;
        if(A.get(A.size()-1) < target) return A.size();
        
        int start = 0; int end = A.size()-1;
        int mid = -1;
        while(start+1 < end) {
            mid = (start+end)/2;
            
            if(A.get(mid) == target) {
                return mid;
            } else if(A.get(mid) < target) {
                start = mid;
            } else {
                end = mid;
            }
        }
        
        return start+1;
    }
}
