/**
 * Definition of Interval:
 * public class Interval {
 *     int start, end;
 *     Interval(int start, int end) {
 *         this.start = start;
 *         this.end = end;
 *     }
 */

class Solution {
    /**
     * @param intervals: Sorted interval list.
     * @return: A new sorted interval list.
     */
    public List<Interval> merge(List<Interval> intervals) {
        // write your code here
        if(intervals == null || intervals.size() <= 0) return intervals;
        
        Collections.sort(intervals, new IntervalComparator());
        
        List<Interval> result = new LinkedList<Interval>();
        
        Interval itv = intervals.get(0);
        for(int i = 1; i < intervals.size(); i++) {
            Interval cur = intervals.get(i);
            if(itv.end >= cur.start) {
                itv.end = Math.max(itv.end, cur.end);
            } else {
                result.add(itv);
                itv = cur;
            }
        }
        result.add(itv);
        return result;
    }

    private class IntervalComparator implements Comparator<Interval> {
        public int compare(Interval a, Interval b) {
            return a.start - b.start;
        }
    }
}
