/**
 * Definition for ListNode.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int val) {
 *         this.val = val;
 *         this.next = null;
 *     }
 * }
 */ 
public class Solution {
    /**
     * @param head: The head of linked list.
     * @return: void
     */
    public void reorderList(ListNode head) {  
        // write your code here
        if(head == null || head.next == null) return;
        ListNode pre = null;
        ListNode fast = head, slow = head;
        
        while(fast != null && fast.next != null) {
            fast = fast.next.next;
            pre = slow;
            slow = slow.next;
        }
        
        pre.next = null;
        
        slow = reverse(slow);
        
        helper(head, slow);
    }
    
    public void helper(ListNode head1, ListNode head2) {
        ListNode n = head1;
        while(n != null) {
            ListNode temp1 = n.next;
            ListNode temp2 = head2.next;
            n.next = head2;
            if(temp1 != null)
                head2.next = temp1;
            else
                break;
            n = temp1;
            head2 = temp2;
        }
    }
    
    public ListNode reverse(ListNode head) {
        if(head == null || head.next == null) return head;
        
        ListNode pre = null;
        while(head != null) {
            ListNode temp = head.next;
            head.next = pre;
            pre = head;
            head = temp;
        }
        return pre;
    }
}

